AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Serverless patterns - Backup CodeCommit to S3 using EventBridge and CodeBuild

Parameters:
  PageDomain:
    Type: String
    Default: your-domain.host

Resources:
  # private CodeCommit repository
  CodeCommitRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Sub ${PageDomain}-repo
      RepositoryDescription: This is a repository for the website build

  # private s3 bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Description: Bucket for the builds
    Properties:
      VersioningConfiguration:
        Status: Enabled
      AccessControl: Private

  # Bucket that will store the buildspec for codebuild
  BuildSpecBucket:
    Type: 'AWS::S3::Bucket'
    Description: Bucket to store the buildspec to be used by CodeBuild
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      AccessControl: Private

  # Role with permisions for the CodeBuild project
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
            - Effect: Allow
              Principal:
                  Service:
                    - codebuild.amazonaws.com
              Action:
                - sts:AssumeRole
      Description: !Sub "IAM Role for ${AWS::StackName}"
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - codecommit:GitPull
                  - s3:Get*
                  - s3:List*
                  - s3:PutObject
                  - s3:DeleteObject
                Effect: Allow
                Resource: '*'

  # Project that clones the CodeCommit repository and uploads to S3              
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: CodeBuild project to sync CodeCommit repository to S3
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: BUCKET
            Value: !Ref S3Bucket
            Type: PLAINTEXT
          - Name: ACCOUNT
            Value: !Sub ${AWS::AccountId}
            Type: PLAINTEXT
      Source:
        Location: !Join
          - ''
          - - !Ref BuildSpecBucket
            - '/codebuild-source/'
        Type: S3
      TimeoutInMinutes: 10

  # Lambda function to create the buildspec.yml in the BuildSpecBucket at template deployment time
  CreateBuildspec:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      InlineCode: |
        import boto3
        import os
        import cfnresponse

        def handler(event, context):
          filename = "buildspec.yml"
          # buildspec.yml code inside the string
          string = """
            version: 0.2
            phases:
              install:
                commands:
                  - pip install git-remote-codecommit
              build:
                commands:
                  - git clone -b $REFERENCE_NAME codecommit::$REPO_REGION://$REPOSITORY_NAME
                  - rm -r $REPOSITORY_NAME/.git
                  - aws s3 rm s3://$BUCKET --recursive
                  - aws s3 cp --recursive $REPOSITORY_NAME s3://$BUCKET/
          """

          encoded_string = string.encode("utf-8")
          bucket_name = os.environ['bucket']
          s3_path = "codebuild-source/" + filename
          s3 = boto3.resource("s3")
          responseData = {}
          try:
            print("Creating buildspec file")
            s3.Bucket(bucket_name).put_object(Key=s3_path, Body=encoded_string)
            print("File created")
            responseData['Data'] = "File created"
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
          except Exception as e:
            print("There was an error creating the file")
            log_exception()
            responseData['Data'] = e
            cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
          return
      Runtime: python3.9
      Environment:
        Variables:
          bucket: !Ref BuildSpecBucket
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Join                                                                                       
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref BuildSpecBucket
                  - '/*'

  # Custom resource to trigger the Lambda function at template deployment time
  TriggerBuildspecCreation:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: CreateBuildspec
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt CreateBuildspec.Arn

  # Role for the cloudwatch event
  EventRole:
    Description: IAM role to allow Amazon CloudWatch Events to trigger AWS CodeBuild start build
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Sid: 1
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - codebuild:StartBuild
            Effect: Allow
            Resource: !GetAtt 'CodeBuildProject.Arn'
        PolicyName: !Join
          - '-'
          - - !Ref 'AWS::StackName'
            - CloudWatchEventPolicy
      RoleName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - CloudWatchEventRule
    Type: AWS::IAM::Role

  # Cloudwatch event that triggers the CodeBuild when the content of the CodeCommit repository is modified 
  EventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "EventRule"
      EventPattern:
        source:
        - aws.codecommit
        resources:
        - !GetAtt CodeCommitRepo.Arn
        detail-type:
        - CodeCommit Repository State Change
        detail:
          event:
          - referenceUpdated
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt 'CodeBuildProject.Arn'
          Id: CodeCommit2S3
          RoleArn: !GetAtt 'EventRole.Arn'
          InputTransformer:
            InputPathsMap: 
              "referenceType": "$.detail.referenceType"
              "region": "$.region"
              "repositoryName": "$.detail.repositoryName"
              "account": "$.account"
              "referenceName": "$.detail.referenceName"
            InputTemplate: |
              {"environmentVariablesOverride": [{"name": "REFERENCE_NAME","value": <referenceName>},{"name": "REFERENCE_TYPE","value": <referenceType>},{"name": "REPOSITORY_NAME","value": <repositoryName>},{"name": "REPO_REGION","value": <region>},{"name": "ACCOUNT_ID","value": <account>}]}

# CloudFront distribution origin access identity to connect with S3 bucket
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: CloudFront OAI for s3

  # CloudFront Distribution
  PublicDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: S3-build-bucket
            S3OriginConfig:
              OriginAccessIdentity:
                !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: 'index.html'
        IPV6Enabled: true
        Comment: CloudFront distribution
        DefaultCacheBehavior:
          DefaultTTL: 86400
          MaxTTL: 31536000
          TargetOriginId: !Sub 'S3-${AWS::StackName}-root'
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: S3-build-bucket
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'
        PriceClass: 'PriceClass_200'

  # Policy to enable access by OAI
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: 
              !Sub
                - ${bucketArn}/*
                - bucketArn: !GetAtt S3Bucket.Arn
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

Outputs:
  S3Bucket:
    Description: "Bucket where the build is stored"
    Value:
      Ref: S3Bucket
  PublicDistribution:
    Description: "CloudFront distribution"
    Value:
      Ref: PublicDistribution
  CodeCommitRepo:
    Description: "CodeCommit repository"
    Value:
      Ref: CodeCommitRepo